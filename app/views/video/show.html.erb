
    <link rel="stylesheet" href="style.css">
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>

  
    <header>
        <h1>CBS EMOTION ANALYZER</h1>
    </header>
    <main>
        <!-- <p><button id="btnStart">START RECORDING</button><br/>
        <button id="btnStop">STOP RECORDING</button></p>
         -->
        <video controls></video>
        
        <!-- <video id="vid2" controls></video> -->
        <canvas style="display:none;"></canvas>
        <button id="screenshot-button">Capture!</button>
        <img id="screenshot-img">

  <h2>Face Rectangle</h2>
  <ul id="faceRectangle">
  <!-- Will populate list with response content -->
  </ul>
  
  <h2>Emotions</h2>
  <ul id="scores">
  <!-- Will populate list with response content -->
  </ul>
  
        <!-- could save to canvas and do image manipulation and saving too -->
    </main>    
    <script >
    const captureVideoButton =  document.querySelector('#screenshot .capture-button');
const screenshotButton = document.querySelector('#screenshot-button');
const video = document.querySelector('#screenshot video');

const img = document.querySelector('#screenshot-img');
const canvas = document.createElement('canvas');

        let constraintObj = { 
            audio: false, 
            video: { 
                facingMode: "user", 
                width: { min: 640, ideal: 500, max: 1920 },
                height: { min: 480, ideal: 500, max: 1080 } 
            } 
        }; 
        // width: 1280, height: 720  -- preference only
        // facingMode: {exact: "user"}
        // facingMode: "environment"
        
        //handle older browsers that might implement getUserMedia in some way
        if (navigator.mediaDevices === undefined) {
            navigator.mediaDevices = {};
            navigator.mediaDevices.getUserMedia = function(constraintObj) {
                let getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                if (!getUserMedia) {
                    return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                }
                return new Promise(function(resolve, reject) {
                    getUserMedia.call(navigator, constraintObj, resolve, reject);
                });
            }
        }else{
            navigator.mediaDevices.enumerateDevices()
            .then(devices => {
                devices.forEach(device=>{
                    console.log(device.kind.toUpperCase(), device.label);
                    //, device.deviceId
                })
            })
            .catch(err=>{
                console.log(err.name, err.message);
            })
        }
        navigator.mediaDevices.getUserMedia(constraintObj)
        .then(function(mediaStreamObj) {
            //connect the media stream to the first video element
            let video = document.querySelector('video');
            if ("srcObject" in video) {
                 
            screenshotButton.onclick = video.onclick = function() {
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                canvas.getContext('2d').drawImage(video, 0, 0);
                // Other browsers will fall back to image/png
                img.src = canvas.toDataURL('image/png');
                let photo = canvas.toDataURL('image/webp');
                                        console.log(photo);
                                     
                   // No query string parameters for this API call.
            var params = { };

            makeblob = function (dataURL) {
                var BASE64_MARKER = ';base64,';
                if (dataURL.indexOf(BASE64_MARKER) == -1) {
                    var parts = dataURL.split(',');
                    var contentType = parts[0].split(':')[1];
                    var raw = decodeURIComponent(parts[1]);
                    return new Blob([raw], { type: contentType });
                }
                var parts = dataURL.split(BASE64_MARKER);
                var contentType = parts[0].split(':')[1];
                var raw = window.atob(parts[1]);
                var rawLength = raw.length;
    
                var uInt8Array = new Uint8Array(rawLength);
    
                for (var i = 0; i < rawLength; ++i) {
                    uInt8Array[i] = raw.charCodeAt(i);
                }
    
                return new Blob([uInt8Array], { type: contentType });
            }

            console.log(photo),
            $.ajax({
                // NOTE: You must use the same location in your REST call as you used to obtain your subscription keys.
                //   For example, if you obtained your subscription keys from westcentralus, replace "westus" in the
                //   URL below with "westcentralus".
                beforeSend: function(xhrObj){
                    // Request headers, also supports "application/octet-stream"
                    xhrObj.setRequestHeader("Content-Type","application/json");
    
                    // NOTE: Replace the "Ocp-Apim-Subscription-Key" value with a valid subscription key.
                    xhrObj.setRequestHeader("Ocp-Apim-Subscription-Key","3c39f08246b1450cb6de1a4f49bccdae");
                },
                type: "POST",
                url: "https://westus.api.cognitive.microsoft.com/emotion/v1.0/recognize?" + $.param(params),
                    processData: false,
                    
                data: makeblob('photo')
        
                // Request body
    // dataSrc: $("#screenshot-img"),

            }).done(function(data) {
                // Get face rectangle dimensions
                var faceRectangle = data[0].faceRectangle;
                var faceRectangleList = $('#faceRectangle');
    
                // Append to DOM
                for (var prop in faceRectangle) {
                    faceRectangleList.append("<li> " + prop + ": " + faceRectangle[prop] + "</li>");
                }
    
                // Get emotion confidence scores
                var scores = data[0].scores;
                var scoresList = $('#scores');
    
                // Append to DOM
                for(var prop in scores) {
                    scoresList.append("<li> " + prop + ": " + scores[prop] + "</li>")
                }
            }).fail(function(err) {
                alert("Error: " + JSON.stringify(err));
            });
              };
                video.srcObject = mediaStreamObj;
           
            }
            else {
                //old version
                video.src = window.URL.createObjectURL(mediaStreamObj);
            }
            
            video.onloadedmetadata = function(ev) {
                //show in the video element what is being captured by the webcam
                video.play();

         
            };
            
            //add listeners for saving video/audio
            
            
           
        })
      
        
        /*********************************
        getUserMedia returns a Promise
        resolve - returns a MediaStream Object
        reject returns one of the following errors
        AbortError - generic unknown cause
        NotAllowedError (SecurityError) - user rejected permissions
        NotFoundError - missing media track
        NotReadableError - user permissions given but hardware/OS error
        OverconstrainedError - constraint video settings preventing
        TypeError - audio: false, video: false
        *********************************/


        // FACIAL RECOGNITION API
    
    </script>
