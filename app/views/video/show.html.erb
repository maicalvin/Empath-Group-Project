 <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
    <header>
        <h1>CBS EMOTION ANALYZER</h1>
    </header>
    <main>
        <video controls></video>
        <canvas style="display:none;"></canvas>
        <button id="screenshot-button">START</button>
        <button id="end_button">DONE</button>
                <img id="screenshot-img">
                <style> #screenshot-img{display:none}</style>
       <div class="col-md-10 m-0 p-0 w-100">
         <div class="container mt-4 mb-4">
           <div class="row">
             <div class="col-md-6 container">
               <h3>Customer Service Rep.</h3>
               <h4><i class="fas fa-map-marker-alt mr-3"></i>William Smith, <em>NEXT Academy</em></h4>
             </div>
             <div class="col-md-6 container">
               <button class="btn btn-outline-danger btn-sm mt-3" type="button" name="button" style="float: right;">SPANK</button>
               <button class="btn btn-primary btn-sm mr-2 mt-3" type="button" name="button" style="float: right;">Track</button>
             </div>
           </div>
         </div>
         <canvas id="myChart" class=""></canvas>
    </div>
        <%# <h2>Face Rectangle</h2>
            <ul id="faceRectangle">
            </ul>
        <h2>Emotions</h2>
            <ul id="scores">
            </ul> %>
  
    </main>    
    
    <script >
        const captureVideoButton = document.querySelector('#screenshot .capture-button');
        const screenshotButton = document.querySelector('#screenshot-button');
        const video = document.querySelector('#screenshot video');
        const end = document.querySelector('#end_button');
        const img = document.querySelector('#screenshot-img');
        const canvas = document.createElement('canvas');
        let chartCanvas = document.getElementById('myChart');
        let ctx = chartCanvas.getContext('2d');       
        var time_second = 0;

        var data = {
                    labels: [0],
                    datasets: [{
                    label: "Happiness",
                    lineTension: 0.1,
                    borderColor: 'Orange',
                    backgroundColor: 'rgba(1,1,1,0)',
                    data: [0],
                }, {
                    label: "Sadness",
                    lineTension: 0.1,
                    borderColor: 'cornflowerblue',
                    backgroundColor: 'rgba(1,1,1,0)',
                    data: [0],
                }, {
                    label: "Anger",
                    lineTension: 0.1,
                    borderColor: 'red',
                    backgroundColor: 'rgba(1,1,1,0)',
                    data: [0],
                }, {
                    label: "Contempt",
                    lineTension: 0.1,
                    borderColor: 'green',
                    backgroundColor: 'rgba(1,1,1,0)',
                    data: [0],
                }, {
                     label: "Disgust",
                     lineTension: 0.1,
                     borderColor: 'purple',
                     backgroundColor: 'rgba(1,1,1,0)',
                     data: [0],
                }, {
                     label: "Fear",
                     lineTension: 0.1,
                     borderColor: 'pink',
                     backgroundColor: 'rgba(1,1,1,0)',
                     data: [0],
                }, {
                    label: "Neutral",
                    lineTension: 0.1,
                    borderColor: 'grey',
                    backgroundColor: 'rgba(1,1,1,0)',
                    data: [0],
                }, {
                    label: "Surprise",
                    lineTension: 0.1,
                    borderColor: 'yellow',
                    backgroundColor: 'rgba(1,1,1,0)',
                    data: [0],
                    }
                  ]
                };

        var myChart = new Chart(ctx, {
          type: 'line',
          data: data
        });

        let constraintObj = {
            audio: false,
            video: {
                facingMode: "user",
                width: { min: 640, ideal: 500, max: 1920 },
                height: { min: 480, ideal: 500, max: 1080 }
            }
        };


        //handle older browsers that might implement getUserMedia in some way
        if (navigator.mediaDevices === undefined) {
            navigator.mediaDevices = {};
            navigator.mediaDevices.getUserMedia = function (constraintObj) {
                let getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                if (!getUserMedia) {
                    return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                }
                return new Promise(function (resolve, reject) {
                    getUserMedia.call(navigator, constraintObj, resolve, reject);
                });
            }
        } else {
            navigator.mediaDevices.enumerateDevices()
                .then(devices => {
                    devices.forEach(device => {
                        console.log(device.kind.toUpperCase(), device.label);
                        //, device.deviceId
                    })
                })
                .catch(err => {
                    console.log(err.name, err.message);
                })
        }
            navigator.mediaDevices.getUserMedia(constraintObj)
            .then(function (mediaStreamObj) {
            //connect the media stream to the first video element
             let video = document.querySelector('video');
             if ("srcObject" in video) {
            screenshotButton.onclick = video.onclick = function () {
            var myVar = setInterval(myTimer, 3300); //TIME 10seconds
                
                function myTimer() {
                    time_second = 3 + time_second;

                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    canvas.getContext('2d').drawImage(video, 0, 0);
                    // Other browsers will fall back to image/png
                    img.src = canvas.toDataURL('image/png');
                    let photo = canvas.toDataURL('image/webp');
                    // No query string parameters for this API call.
                    makeblob = function (dataURL) {
                        var BASE64_MARKER = ';base64,';
                        if (dataURL.indexOf(BASE64_MARKER) == -1) {
                            var parts = dataURL.split(',');
                            var contentType = parts[0].split(':')[1];
                            var raw = decodeURIComponent(parts[1]);
                            return new Blob([raw], { type: contentType });
                        }
                        var parts = dataURL.split(BASE64_MARKER);
                        var contentType = parts[0].split(':')[1];
                        var raw = window.atob(parts[1]);
                        var rawLength = raw.length;

                        var uInt8Array = new Uint8Array(rawLength);

                        for (var i = 0; i < rawLength; ++i) {
                            uInt8Array[i] = raw.charCodeAt(i);
                        }
                        return new Blob([uInt8Array], { type: contentType });
                    }
                    var params = {};
                    $.ajax({
                        // NOTE: You must use the same location in your REST call as you used to obtain your subscription keys.
                        //   For example, if you obtained your subscription keys from westcentralus, replace "westus" in the
                        //   URL below with "westcentralus".
                        beforeSend: function (xhrObj) {
                            // Request headers, also supports "application/octet-stream"
                            xhrObj.setRequestHeader("Content-Type", "application/octet-stream");

                            // NOTE: Replace the "Ocp-Apim-Subscription-Key" value with a valid subscription key.
                            xhrObj.setRequestHeader("Ocp-Apim-Subscription-Key", '<%= ENV['EMOTION_KEY'] %>');
                        },
                        type: "POST",
                        url: "https://westus.api.cognitive.microsoft.com/emotion/v1.0/recognize?" + $.param(params),
                        processData: false,
                        data: makeblob(canvas.toDataURL('image/png')),


                        // Request body
                        // dataSrc: $("#screenshot-img"),

                    }).done(function (data) {
                        // Get face rectangle dimensions
                        var faceRectangle = data[0].faceRectangle;
                        var faceRectangleList = $('#faceRectangle');

                        // Append to DOM
                        <%# for (var prop in faceRectangle) {
                            faceRectangleList.append("<li> " + prop + ": " + faceRectangle[prop] + "</li>");
                        }
                        faceRectangleList.append("<hr>") %>
                        // Get emotion confidence scores
                        var scores = (data[0].scores);
                        var scoresList = $('#scores');
                         <%# console.log(scores.anger*100);
                        scoresList.append((time_second) + "SECONDS"); %>
                        // Append to DOM
                        <%# for (var prop in scores) {
                            scoresList.append("<li> " + prop + ": " + (scores[prop] * 100).toFixed(2) + "</li>");
                        } %>
                          
                        // let myChart = document.getElementById('myChart').getContext('2d');
                    
                        // Global Options ------------------------------------------
                        // bar, pie, line, horizontalBar, doughnut, radar, polarArea
                        // Chart.defaults.global.defaultFontFamily = 'Lato';
                        // Chart.defaults.global.defaultFontSize = '14';
                        // Charts.defaults.global.defaultFontColor = '#000';
                    
                    
                        //test for button onclick to add new data point
                        console.log(myChart.data.datasets[0].data)
                        myChart.data.datasets[0].data.push(scores.happiness*100);
                        myChart.data.datasets[1].data.push(scores.sadness*100);
                        myChart.data.datasets[2].data.push(scores.anger*100);
                        myChart.data.datasets[3].data.push(scores.contempt*100);
                        myChart.data.datasets[4].data.push(scores.disgust*100);
                        myChart.data.datasets[5].data.push(scores.fear*100);
                        myChart.data.datasets[6].data.push(scores.neutral*100);
                        myChart.data.datasets[7].data.push(scores.surprise*100);
                        myChart.data.labels.push(time_second);
                        myChart.update();
                        scoresList.append("<hr>");
                        }).fail(function (err) {
                        alert("Error: " + JSON.stringify(err));
                        });
                        };
              
                         end.onclick = function () {
                             clearInterval(myVar);
                         }
                         video.srcObject = mediaStreamObj;
            }
        }

        else {
            //old version
            video.src = window.URL.createObjectURL(mediaStreamObj);
        }
        video.onloadedmetadata = function (ev) {
         //show in the video element what is being captured by the webcam
        video.play();
        };
        //add listeners for saving video/audio
        })
        </script>
       